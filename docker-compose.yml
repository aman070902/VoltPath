version: "3.8"

services:
  # PostgreSQL database service
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - voltpath-network

  # Zookeeper service
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    ports:
      - "2181:2181"
    networks:
      - voltpath-network

  # Kafka service
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    ports:
      - "9092:9092"  # external access
      - "9093:9093"  # internal access
    depends_on:
      - zookeeper
    networks:
      - voltpath-network

  # Producer service
  producer:
    build:
      context: .
      dockerfile: producer/Dockerfile
    container_name: producer
    environment:
      - API_KEY=${API_KEY}
    depends_on:
      - kafka
    networks:
      - voltpath-network

  # Consumer service
  consumer:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    container_name: consumer
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - kafka
      - postgres
    networks:
      - voltpath-network

volumes:
  postgres_data:

networks:
  voltpath-network:
    driver: bridge
